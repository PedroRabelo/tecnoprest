generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ativo     Boolean  @default(false)

  name       String?
  email      String  @unique
  password   String
  role       Role    @default(USER)
  assignedBy String?

  tenant   Tenant? @relation(fields: [tenantId], references: [id])
  tenantId String?

  @@map("users")
}

model Tenant {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ativo     Boolean  @default(true)

  slug          String  @unique
  logoUrl       String?
  cnpj          String  @unique
  name          String
  email         String
  contactName   String
  contactNumber String
  postalCode    String
  streetAddress String
  city          String
  state         String
  country       String

  users        User[]
  vehicles     VehicleTenant[]
  mapLocations TenantMapLocation[]
  deliveries   Delivery[]
  drivers      DriverTenant[]

  @@map("tenants")
}

model Driver {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  active    Boolean  @default(true)

  name                  String
  cpf                   String    @unique
  rg                    String
  rgUf                  String
  driverLicense         String    @unique
  driverLicenseCategory String
  driverLicenseDate     DateTime
  driverLicenseExpires  DateTime
  phoneNumber           String
  email                 String    @unique
  postalCode            String?
  streetAddress         String?
  city                  String?
  state                 String?
  country               String?
  mopp                  String?
  moppExpires           DateTime?
  languages             String[]
  emergencyPhone        String?

  tenants DriverTenant[]

  @@map("drivers")
}

model VehicleCategory {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String

  vehicles Vehicle[]

  @@map("vehicle_categories")
}

model VehicleMake {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name     String
  vehicles Vehicle[]

  models VehicleModel[]

  @@map("vehicle_makers")
}

model VehicleModel {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String

  maker  VehicleMake @relation(fields: [makeId], references: [id])
  makeId String

  vehicles Vehicle[]

  @@map("vehicle_models")
}

model Vehicle {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  active    Boolean  @default(true)

  licensePlate String @unique

  renavan     String?
  chassi      String?
  modelYear   Int?
  createdYear Int?
  ownerCpf    String?
  owner       String?

  category   VehicleCategory? @relation(fields: [categoryId], references: [id])
  categoryId String?
  make       VehicleMake?     @relation(fields: [makeId], references: [id])
  makeId     String?
  model      VehicleModel?    @relation(fields: [modelId], references: [id])
  modelId    String?

  trackers Tracker[]
  tenants  VehicleTenant[]

  @@map("vehicles")
}

model Tracker {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  active    Boolean  @default(true)

  trackNumber String
  technology  String

  vehicle   Vehicle @relation(fields: [vehicleId], references: [id])
  vehicleId String

  @@unique([trackNumber, technology])
  @@map("trackers")
}

model VehicleTenant {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  vehicle    Vehicle    @relation(fields: [vehicleId], references: [id])
  vehicleId  String
  tenant     Tenant     @relation(fields: [tenantId], references: [id])
  tenantId   String
  deliveries Delivery[]

  @@map("vehicles_tenant")
}

model DriverTenant {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  driver     Driver     @relation(fields: [driverId], references: [id])
  driverId   String
  tenant     Tenant     @relation(fields: [tenantId], references: [id])
  tenantId   String
  deliveries Delivery[]

  @@map("drivers_tenant")
}

model TenantMapLocation {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  active    Boolean  @default(true)

  title       String
  type        LocationType
  lat         String[]
  long        String[]
  description String?
  isRoute     Boolean      @default(false)
  isPolygon   Boolean      @default(false)

  tenant   Tenant @relation(fields: [tenantId], references: [id])
  tenantId String

  @@map("tenant_map_locations")
}

model Delivery {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  active    Boolean  @default(true)

  startDate       DateTime
  routeName       String
  origin          String
  originLatitude  String
  originLongitude String

  vehicle   VehicleTenant? @relation(fields: [vehicleId], references: [id])
  vehicleId String?
  driver    DriverTenant?  @relation(fields: [driverId], references: [id])
  driverId  String?
  tenant    Tenant         @relation(fields: [tenantId], references: [id])
  tenantId  String

  @@map("deliveries")
}

model DeliveryDirection {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  status   String
  geocoded DirectionGeocoded[]
  routes   DirectionRoute[]

  @@map("delivery_directions")
}

model DirectionGeocoded {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  status  String
  placeId String
  types   String[]

  deliveryDirection   DeliveryDirection @relation(fields: [deliveryDirectionId], references: [id])
  deliveryDirectionId String

  @@map("direction_geocoded")
}

model DirectionRoute {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  deliveryDirection   DeliveryDirection @relation(fields: [deliveryDirectionId], references: [id])
  deliveryDirectionId String

  copyrights       String
  bounds           Json
  legs             RouteLeg[]
  overviewPolyline Json
  sumary           String
  warnings         String
  waypointOrder    Int[]

  @@map("direction_routes")
}

model RouteLeg {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  directionRoute   DirectionRoute @relation(fields: [directionRouteId], references: [id])
  directionRouteId String

  leg Json

  @@map("route_legs")
}

enum Role {
  USER
  ADMIN
  ADMIN_TENANT
  USER_TENANT
}

enum LocationType {
  MATRIZ
  FILIAL
  POSTO
  OFICINA
  PEDAGIO
}
